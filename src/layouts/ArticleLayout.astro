---
import Layout from './Layout.astro';
import Comments from '../components/Comments.astro';
import { SITE } from '../config';
import { siX, siFacebook, siHatenabookmark } from 'simple-icons';
import WebMentions from '../components/WebMentions.astro';

export interface Props {
  title: string;
  content: any;
  previousPost?: any;
  nextPost?: any;
  shareUrl?: string;
}

const { title, content, previousPost, nextPost, shareUrl } = Astro.props;
const pageTitle = `${title} | ${SITE.title}`;
const authorName = SITE.author.name;

// 本文からサマリを生成する関数
function generateDescription(content: any): string {
  // 既にdescriptionがある場合はそれを使用
  if (content.data.description && content.data.description.trim() !== '') {
    return content.data.description;
  }
  
  // 本文からサマリを生成
  const bodyText = content.body || '';
  const plainText = bodyText
    .replace(/---[\s\S]*?---/g, '') // フロントマターを除去
    .replace(/```[\s\S]*?```/g, '') // コードブロックを除去
    .replace(/#{1,6}\s+/g, '') // ヘッダー記号を除去
    .replace(/\*{1,2}([^*]+)\*{1,2}/g, '$1') // 太字・斜体記号を除去
    .replace(/`([^`]+)`/g, '$1') // インラインコード記号を除去
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // リンク記号を除去
    .replace(/\n+/g, ' ') // 改行を空白に変換
    .replace(/\s+/g, ' ') // 複数の空白を1つに
    .trim()
    .slice(0, 160); // 160文字に制限（SEO推奨）
  
  return plainText + (plainText.length >= 160 ? '...' : '');
}

const metaDescription = generateDescription(content);
const publishedTime = content.data.pubDate.toISOString();
const modifiedTime = content.data.updatedDate?.toISOString();
const currentUrl = shareUrl || new URL(`/${content.collection}/${content.slug}/`, SITE.url).href;
const ogImageUrl = content.data.ogimage ? new URL(content.data.ogimage, SITE.url).href : new URL('/images/opengraph-default.png', SITE.url).href;
---

<Layout title={pageTitle} description={metaDescription} image={content.data.ogimage}>
  <!-- Article specific meta tags in head -->
  <Fragment slot="head">
    <meta property="article:published_time" content={publishedTime} />
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    <meta property="article:author" content={authorName} />
    <meta property="article:section" content="Technology" />
    
    <!-- JSON-LD Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": title,
      "description": metaDescription,
      "image": ogImageUrl,
      "author": {
        "@type": "Person",
        "name": authorName,
        "url": SITE.url
      },
      "publisher": {
        "@type": "Organization",
        "name": SITE.title,
        "logo": {
          "@type": "ImageObject",
          "url": new URL('/images/site-icon.png', SITE.url).href
        }
      },
      "datePublished": publishedTime,
      "dateModified": modifiedTime || publishedTime,
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": currentUrl
      },
      "url": currentUrl
    })} />
    
    <!-- BreadcrumbList Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": [
        {
          "@type": "ListItem",
          "position": 1,
          "name": "Home",
          "item": SITE.url
        },
        {
          "@type": "ListItem",
          "position": 2,
          "name": "Blog",
          "item": `${SITE.url}/logs`
        },
        {
          "@type": "ListItem",
          "position": 3,
          "name": title,
          "item": currentUrl
        }
      ]
    })} />
    
    <!-- Applause Button CSS & JS -->
    <link rel="stylesheet" href="https://unpkg.com/applause-button/dist/applause-button.css" />
    <script src="https://unpkg.com/applause-button/dist/applause-button.js"></script>
  </Fragment>

  <article
    itemscope
    itemtype="http://schema.org/Article"
    class="prose prose-lg mx-auto max-w-4xl px-4 py-8"
  >
    <header class="mb-8">
      <h1 itemprop="headline" class="text-3xl font-bold md:text-5xl mb-0 font-titillium">
        {title}
      </h1>
      
      <div class="text-sm text-gray-600 m-0">
        <time itemprop="datePublished" datetime={content.data.pubDate.toISOString()}>
          {content.data.pubDate.toLocaleDateString('ja-JP')}
        </time>
        {content.data.updatedDate && (
          <>
            {' '} (更新: <time itemprop="dateModified" datetime={content.data.updatedDate.toISOString()}>
              {content.data.updatedDate.toLocaleDateString('ja-JP')}
            </time>)
          </>
        )}
      </div>
      
      <!-- Mini Applause Button -->
      <div class="relative m-0 p-0" style="margin:0;padding:0;">
        <applause-button 
          style="width: 24px; height: 24px; margin:0; padding:0;"
          color="#dc3545"
          api="https://applause.chabouis.fr"
          url={currentUrl}
        />
      </div>
    </header>

    <div itemprop="articleBody" class="prose prose-lg max-w-none">
      <slot />
    </div>

    <footer class="mt-8 pt-4">
      <div class="mb-4">
        <span class="text-sm text-gray-600">Written by </span>
        <span itemprop="author" itemscope itemtype="http://schema.org/Person">
          <span itemprop="name">{authorName}</span>
        </span>
      </div>
    </footer>
  </article>

  <!-- Navigation -->
  <nav class="mx-auto max-w-4xl px-4">
    <ul class="my-5 grid grid-cols-2 divide-x border-y text-center text-2xl uppercase">
      <li class="hover-style p-3">
        {previousPost ? (
          <a
            href={`/${previousPost.collection}/${previousPost.slug}/`}
            title={previousPost.data.title}
            rel="prev"
            class="block"
          >
            prev
            <div class="text-xs text-gray-500 mt-1">{previousPost.data.title}</div>
          </a>
        ) : (
          <span class="text-gray-400">prev</span>
        )}
      </li>
      <li class="hover-style p-3">
        {nextPost ? (
          <a
            href={`/${nextPost.collection}/${nextPost.slug}/`}
            title={nextPost.data.title}
            rel="next"
            class="block"
          >
            next
            <div class="text-xs text-gray-500 mt-1">{nextPost.data.title}</div>
          </a>
        ) : (
          <span class="text-gray-400">next</span>
        )}
      </li>
    </ul>
  </nav>

  <!-- Share Buttons -->
  <div class="mx-auto max-w-4xl px-4 mb-8">
    <div class="flex gap-2 my-6 items-end">
      <!-- X (Twitter) -->
      <a
        href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(currentUrl)}&text=${encodeURIComponent(title)}`}
        target="_blank"
        rel="noopener noreferrer"
        aria-label="Xでシェア"
        class="hover:opacity-70 transition"
      >
        <svg
          role="img"
          viewBox="0 0 24 24"
          class="w-6 h-6"
          style="color: #000;"
        >
          <path d={siX.path} />
        </svg>
      </a>
      <!-- Facebook -->
      <a
        href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(currentUrl)}`}
        target="_blank"
        rel="noopener noreferrer"
        aria-label="Facebookでシェア"
        class="hover:opacity-70 transition"
      >
        <svg
          role="img"
          viewBox="0 0 24 24"
          class="w-6 h-6"
          style="color: #1877F2;"
        >
          <path d={siFacebook.path} />
        </svg>
      </a>
      <!-- Hatena -->
      <a
        href={`https://b.hatena.ne.jp/add?mode=confirm&url=${encodeURIComponent(currentUrl)}&title=${encodeURIComponent(title)}`}
        target="_blank"
        rel="noopener noreferrer"
        aria-label="はてなブックマークでシェア"
        class="hover:opacity-70 transition"
      >
        <svg
          role="img"
          viewBox="0 0 24 24"
          class="w-6 h-6"
          style="color: #00A4DE;"
        >
          <path d={siHatenabookmark.path} />
        </svg>
      </a>
      <!-- Applause Button（いいねボタン） -->
      <applause-button 
        style="width: 28px; height: 28px; margin:0; padding:0;"
        color="#dc3545"
        api="https://applause.chabouis.fr"
        url={currentUrl}
        class="self-end"
      />
    </div>
  </div>

  <!-- Webmentions Section -->
  <div class="mx-auto max-w-4xl px-4 mb-8">
    <WebMentions url={currentUrl} />
  </div>

  <!-- Comments Section -->
  <div class="mx-auto max-w-4xl px-4">
    <Comments />
  </div>

  <script>
    // Add URL copy functionality and Instagram embed script
    document.addEventListener('DOMContentLoaded', function() {
      // URL copy functionality
      const copyButtons = document.querySelectorAll('[data-copy-url]');
      copyButtons.forEach((button) => {
        button.addEventListener('click', function(this: HTMLElement) {
          const url = this.getAttribute('data-copy-url');
          if (url && navigator.clipboard) {
            navigator.clipboard.writeText(url).then(() => {
              alert('URLをコピーしました');
            });
          }
        });
      });

      // Instagram embed script loading
      const instagramEmbeds = document.querySelectorAll('.instagram-media');
      if (instagramEmbeds.length > 0 && !document.querySelector('script[src*="instagram.com/embed.js"]')) {
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = '//www.instagram.com/embed.js';
        script.async = true;
        document.head.appendChild(script);
      }

      // Process OEmbed for multiple providers (like Gatsby version)
      const processedUrls = new Set<string>();
      
      // OEmbed provider configurations
      const oembedProviders = [
        {
          name: 'YouTube',
          patterns: [/https:\/\/(www\.)?youtube\.com\/watch\?v=/, /https:\/\/youtu\.be\//],
          endpoint: 'https://www.youtube.com/oembed'
        },
        {
          name: 'Twitter',
          patterns: [/https:\/\/(www\.)?twitter\.com\/\w+\/status\/\d+/, /https:\/\/x\.com\/\w+\/status\/\d+/],
          useWidget: true,
          maxwidth: 300
        },
        {
          name: 'SpeakerDeck',
          patterns: [/https:\/\/speakerdeck\.com\//],
          endpoint: 'https://speakerdeck.com/oembed.json'
        },
        {
          name: 'Spotify',
          patterns: [/https:\/\/open\.spotify\.com\//],
          endpoint: 'https://open.spotify.com/oembed'
        },
        {
          name: 'SlideShare',
          patterns: [/https:\/\/www\.slideshare\.net\//],
          endpoint: 'https://www.slideshare.net/api/oembed/2'
        },
        {
          name: 'Suzuri',
          patterns: [/https:\/\/suzuri\.jp\/[^\/]+\/\d+/],
          endpoint: 'https://suzuri.jp/oembed'
        }
      ] as Array<{
        name: string;
        patterns: RegExp[];
        endpoint?: string;
        useWidget?: boolean;
        maxwidth?: number;
      }>;

      // Find all links that might be oembed candidates
      const allLinks = document.querySelectorAll('a:not([data-oembed-processed])') as NodeListOf<HTMLAnchorElement>;
      
      allLinks.forEach(link => {
        let url = link.href;
        // x.com → twitter.com に自動変換
        if (url.match(/^https:\/\/x\.com\//)) {
          url = url.replace(/^https:\/\/x\.com\//, 'https://twitter.com/');
        }
        
        // Check if this URL matches any oembed provider
        const provider = oembedProviders.find(p => 
          p.patterns.some(pattern => pattern.test(url))
        );
        
        if (provider) {
          console.log(`Found ${provider.name} URL:`, url);
          
          // Check if it's a standalone link
          const isStandalone = isStandaloneLink(link);
          console.log(`Is standalone link:`, isStandalone);
          
          if (!isStandalone) {
            return; // Skip non-standalone links
          }
          
          // Skip if already processed
          if (processedUrls.has(url)) {
            link.style.display = 'none';
            return;
          }
          
          // Mark as processed
          link.setAttribute('data-oembed-processed', 'true');
          processedUrls.add(url);
          
          // Handle Twitter with Widget.js
          if (provider.useWidget && provider.name === 'Twitter') {
            handleTwitterEmbed(link, url);
            return;
          }
          
          // Handle other providers with oembed API
          if (provider.endpoint) {
            // Build oembed URL
            const oembedUrl = new URL(provider.endpoint);
            oembedUrl.searchParams.set('url', url);
            if (provider.maxwidth) {
              oembedUrl.searchParams.set('maxwidth', provider.maxwidth.toString());
            }
            
            console.log(`Fetching oembed from:`, oembedUrl.toString());
            
            fetch(oembedUrl.toString())
              .then(response => {
                console.log(`${provider.name} oembed response status:`, response.status);
                return response.json();
              })
              .then(data => {
                console.log(`${provider.name} oembed data:`, data);
                if (data.html) {
                  const embedContainer = document.createElement('div');
                  embedContainer.innerHTML = data.html;
                  embedContainer.className = `${provider.name.toLowerCase()}-embed my-4`;
                  
                  // Replace the link
                  const parentP = link.closest('p');
                  if (parentP) {
                    const linkText = link.textContent || '';
                    const parentText = parentP.textContent || '';
                    
                    if (parentText.trim() === linkText.trim() || parentText.trim() === url) {
                      parentP.replaceWith(embedContainer);
                    } else {
                      link.replaceWith(embedContainer);
                    }
                  } else {
                    link.replaceWith(embedContainer);
                  }
                  console.log(`${provider.name} embed successfully inserted`);
                }
              })
              .catch(error => {
                console.log(`${provider.name} oembed failed:`, error);
              });
          }
        }
      });

      // Check if a link is standalone (same logic as before)
      function isStandaloneLink(link: HTMLAnchorElement): boolean {
        const linkText = link.textContent || '';
        const linkUrl = link.href;
        
        // Link text should match URL (standalone link)
        if (linkText.trim() !== linkUrl) {
          return false;
        }
        
        // Check if parent p element contains only this link
        const parentP = link.closest('p');
        if (parentP) {
          const parentText = parentP.textContent || '';
          return parentText.trim() === linkText.trim();
        }
        
        return true;
      }

      // Handle Twitter embed using Widget.js
      function handleTwitterEmbed(link: HTMLAnchorElement, url: string) {
        console.log('Handling Twitter embed with Widget.js:', url);
        
        // Create Twitter widget container
        const embedContainer = document.createElement('div');
        embedContainer.className = 'twitter-embed my-4';
        
        // Create blockquote for Twitter widget
        const blockquote = document.createElement('blockquote');
        blockquote.className = 'twitter-tweet';
        blockquote.setAttribute('data-width', '300');
        
        // Create link inside blockquote
        const tweetLink = document.createElement('a');
        tweetLink.href = url;
        tweetLink.textContent = 'Tweet';
        blockquote.appendChild(tweetLink);
        
        embedContainer.appendChild(blockquote);
        
        // Replace the link
        const parentP = link.closest('p');
        if (parentP) {
          const linkText = link.textContent || '';
          const parentText = parentP.textContent || '';
          
          if (parentText.trim() === linkText.trim() || parentText.trim() === url) {
            parentP.replaceWith(embedContainer);
          } else {
            link.replaceWith(embedContainer);
          }
        } else {
          link.replaceWith(embedContainer);
        }
        
        // Load Twitter Widget.js if not already loaded
        if (!(window as any).twttr) {
          const script = document.createElement('script');
          script.async = true;
          script.src = 'https://platform.twitter.com/widgets.js';
          script.onload = function() {
            if ((window as any).twttr && (window as any).twttr.widgets) {
              (window as any).twttr.widgets.load();
            }
          };
          document.head.appendChild(script);
        } else {
          // Twitter Widget.js already loaded, just process new widgets
          if ((window as any).twttr.widgets) {
            (window as any).twttr.widgets.load();
          }
        }
        
        console.log('Twitter embed successfully inserted');
      }
    });
  </script>

  <!-- Schema.org structured data -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": title,
    "description": metaDescription,
    "image": ogImageUrl,
    "author": {
      "@type": "Person",
      "name": authorName,
      "url": SITE.url + "/about"
    },
    "publisher": {
      "@type": "Organization",
      "name": SITE.title,
      "url": SITE.url,
      "logo": {
        "@type": "ImageObject",
        "url": SITE.url + "/images/site-icon.png"
      }
    },
    "datePublished": publishedTime,
    "dateModified": modifiedTime || publishedTime,
    "url": currentUrl,
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": currentUrl
    }
  })} />
</Layout>
