---
import { type CollectionEntry, getCollection } from 'astro:content';
import ArticleLayout from '../layouts/ArticleLayout.astro';
import { getLogSlug } from '../utils/slug';

export async function getStaticPaths() {
  const logsPosts = await getCollection('logs');
  const backtracePosts = await getCollection('backtrace');
  
  // logsコレクションのパス生成
  const sortedLogsPosts = logsPosts.sort((a, b) => 
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
  
  const logsPaths = sortedLogsPosts.map((post, index: number) => {
    const previousPost = sortedLogsPosts[index + 1] || undefined;
    const nextPost = sortedLogsPosts[index - 1] || undefined;
    
    const fileName = post.slug.replace(/^\d{4}\//, '');
    const dateMatch = fileName.match(/^(\d{4})-(\d{2})-(\d{2})-(.+)$/);
    
    if (!dateMatch) {
      const slug = fileName.toLowerCase();
      return {
        params: { slug: slug },
        props: { 
          post,
          previousPost: previousPost ? {
            slug: getLogSlug(previousPost.slug),
            collection: 'logs',
            data: previousPost.data
          } : undefined,
          nextPost: nextPost ? {
            slug: getLogSlug(nextPost.slug),
            collection: 'logs',
            data: nextPost.data
          } : undefined
        },
      };
    }
    
    const [, year, month, day, slug] = dateMatch;
    const urlSlug = `${year}/${month}/${day}/${slug}`;
    
    return {
      params: { slug: urlSlug },
      props: { 
        post,
        previousPost: previousPost ? {
          slug: getLogSlug(previousPost.slug),
          collection: 'logs',
          data: previousPost.data
        } : undefined,
        nextPost: nextPost ? {
          slug: getLogSlug(nextPost.slug),
          collection: 'logs',
          data: nextPost.data
        } : undefined
      },
    };
  });

  // backtraceコレクションのパス生成
  const sortedBacktracePosts = backtracePosts.sort((a, b) => 
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
  
  const backtracePaths = sortedBacktracePosts.map((post, index: number) => {
    const previousPost = sortedBacktracePosts[index + 1] || undefined;
    const nextPost = sortedBacktracePosts[index - 1] || undefined;
    
    const fileName = post.slug.replace(/^\d{4}\//, '');
    const dateMatch = fileName.match(/^(\d{4})-(\d{2})-(\d{2})-(.+)$/);
    
    if (!dateMatch) {
      const slug = fileName.toLowerCase();
      return {
        params: { slug: `backtrace/${slug}` },
        props: { 
          post,
          previousPost: previousPost ? {
            slug: `backtrace/${previousPost.slug}`,
            collection: 'backtrace',
            data: previousPost.data
          } : undefined,
          nextPost: nextPost ? {
            slug: `backtrace/${nextPost.slug}`,
            collection: 'backtrace',
            data: nextPost.data
          } : undefined
        },
      };
    }
    
    const [, year, month, day, slug] = dateMatch;
    const urlSlug = `backtrace/${year}/${month}/${day}/${slug}`;
    
    return {
      params: { slug: urlSlug },
      props: { 
        post,
        previousPost: previousPost ? {
          slug: `backtrace/${previousPost.slug}`,
          collection: 'backtrace',
          data: previousPost.data
        } : undefined,
        nextPost: nextPost ? {
          slug: `backtrace/${nextPost.slug}`,
          collection: 'backtrace',
          data: nextPost.data
        } : undefined
      },
    };
  });

  return [...logsPaths, ...backtracePaths];
}

const { post, previousPost, nextPost } = Astro.props;
const { Content } = await post.render();
const shareUrl = `https://nawo.to/${Astro.params.slug}`;
---

<ArticleLayout 
  title={post.data.title}
  content={post}
  previousPost={previousPost}
  nextPost={nextPost}
  shareUrl={shareUrl}
>
  <Content />
</ArticleLayout>