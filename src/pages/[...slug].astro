---
import { type CollectionEntry, getCollection } from 'astro:content';
import ArticleLayout from '../layouts/ArticleLayout.astro';
import { getLogsUrl } from '../utils/slug';

export async function getStaticPaths() {
  const posts = await getCollection('logs');
  
  // 公開日順にソート（新しい記事が前に来るように）
  const sortedPosts = posts.sort((a, b) => 
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
  
  return sortedPosts.map((post: CollectionEntry<'logs'>, index: number) => {
    const previousPost = sortedPosts[index + 1] || null; // より古い記事
    const nextPost = sortedPosts[index - 1] || null; // より新しい記事
    
    // ファイル名から日付とslugを抽出して /yyyy/mm/dd/slug/ 形式のURLを生成
    const fileName = post.slug.replace(/^\d{4}\//, ''); // 年別ディレクトリを除去
    const dateMatch = fileName.match(/^(\d{4})-(\d{2})-(\d{2})-(.+)$/);
    
    if (!dateMatch) {
      // 日付プレフィックスがない場合はそのまま使用
      const slug = fileName.toLowerCase();
      return {
        params: { slug: slug },
        props: { 
          post,
          previousPost: previousPost ? {
            slug: getLogsUrl(previousPost.slug).replace(/^\//, '').replace(/\/$/, ''),
            collection: 'logs',
            data: previousPost.data
          } : null,
          nextPost: nextPost ? {
            slug: getLogsUrl(nextPost.slug).replace(/^\//, '').replace(/\/$/, ''),
            collection: 'logs',
            data: nextPost.data
          } : null
        },
      };
    }
    
    const [, year, month, day, slug] = dateMatch;
    const urlSlug = `${year}/${month}/${day}/${slug}`;
    
    return {
      params: { slug: urlSlug },
      props: { 
        post,
        previousPost: previousPost ? {
          slug: getLogsUrl(previousPost.slug).replace(/^\//, '').replace(/\/$/, ''),
          collection: 'logs',
          data: previousPost.data
        } : null,
        nextPost: nextPost ? {
          slug: getLogsUrl(nextPost.slug).replace(/^\//, '').replace(/\/$/, ''),
          collection: 'logs',
          data: nextPost.data
        } : null
      },
    };
  });
}

const { post, previousPost, nextPost } = Astro.props;
const { Content } = await post.render();
const shareUrl = `https://nawo.to/${Astro.params.slug}`;
---

<ArticleLayout 
  title={post.data.title}
  content={post}
  previousPost={previousPost}
  nextPost={nextPost}
  shareUrl={shareUrl}
>
  <Content />
</ArticleLayout>