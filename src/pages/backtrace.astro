---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { SITE } from '../config';

const posts = (await getCollection('backtrace')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// 記事を年別にグループ化
const postsByYear = posts.reduce((acc, post) => {
	const year = post.data.pubDate.getFullYear();
	if (!acc[year]) {
		acc[year] = [];
	}
	acc[year].push(post);
	return acc;
}, {} as Record<number, typeof posts>);

// 年を降順でソート
const years = Object.keys(postsByYear).map(Number).sort((a, b) => b - a);

// 記事の抜粋を生成する関数（Gatsbyライク版）
function generateExcerpt(content: string): string {
	// 最初の140文字程度を取得（Gatsbyのデフォルト）
	const plainText = content
		.replace(/---[\s\S]*?---/g, '') // フロントマターを除去
		.slice(0, 500) // 最初の500文字から処理開始
		.replace(/```[\s\S]*?```/g, '[コード]') // コードブロックを[コード]に置換
		.replace(/#{1,6}\s+/g, '') // ヘッダー記号を除去
		.replace(/\*{1,2}([^*]+)\*{1,2}/g, '$1') // 太字・斜体記号を除去
		.replace(/`([^`]+)`/g, '$1') // インラインコード記号を除去
		.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // リンク記号を除去
		.replace(/\n+/g, ' ') // 改行を空白に変換
		.replace(/\s+/g, ' ') // 複数の空白を1つに
		.trim()
		.slice(0, 140); // 最終的に140文字に制限
	
	return plainText + (plainText.length >= 140 ? '...' : '');
}

// 記事の本文を読み込んで抜粋を生成
const postsWithExcerptRaw = await Promise.all(
	posts.map(async (post) => {
		const excerpt = generateExcerpt(post.body);
		return {
			...post,
			excerpt
		};
	})
);

// 抜粋生成後に再度ソート
const postsWithExcerpt = postsWithExcerptRaw.sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// 年別グループにも抜粋を追加
const postsByYearWithExcerpt = years.reduce((acc, year) => {
	acc[year] = postsByYear[year].map(post => {
		const postWithExcerpt = postsWithExcerpt.find(p => p.slug === post.slug);
		return postWithExcerpt || { ...post, excerpt: generateExcerpt(post.body) };
	});
	return acc;
}, {} as Record<number, typeof postsWithExcerpt>);
---

<Layout title={`BACKTRACE | ${SITE.title}`}>
	<!-- Tab Navigation -->
	<div class="mt-4">
		<div class="tab-container">
			<a href="/logs" class="tab">LOGS</a>
			<a href="/texts" class="tab">TEXTS</a>
			<a href="/backtrace" class="tab active">BACKTRACE</a>
		</div>
		<p class="text-sm text-gray-500 text-left pl-4 mt-2">
			[WIP] ❓ かつて「はてなダイアリー」でアジャイルな開発を夢みて奮闘していた記録
		</p>
	</div>

	<!-- View Mode Toggle -->
	<nav class="mx-auto w-5/6 mt-6 mb-4" aria-label="表示モード切り替え">
		<div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 text-sm font-mono">
			<span class="whitespace-nowrap">view mode:</span>
			<div class="flex space-x-2" role="tablist" aria-label="表示モード">
				<button id="flat-mode" class="view-mode-btn active px-3 py-1 rounded border" role="tab" aria-selected="true" aria-controls="flat-view">flat</button>
				<button id="yearly-mode" class="view-mode-btn px-3 py-1 rounded border" role="tab" aria-selected="false" aria-controls="yearly-view">yearly</button>
			</div>
		</div>
	</nav>

	<!-- Year Navigation (yearly mode only) -->
	<nav id="year-nav" class="mx-auto w-5/6 mb-6 hidden" aria-label="年別ジャンプナビゲーション">
		<div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4 text-sm font-mono">
			<span class="whitespace-nowrap">jump to year:</span>
			<div class="flex flex-wrap gap-2">
				{years.map(year => (
					<button 
						class="year-jump-btn px-2 py-1 rounded border hover:bg-gray-100 transition-colors"
						data-year={year}
						aria-label={`${year}年の記事にジャンプ`}
					>
						{year}
					</button>
				))}
			</div>
		</div>
	</nav>

	<!-- Flat View (Default) -->
	<main id="flat-view" class="view-content" role="tabpanel" aria-labelledby="flat-mode">
		<ol style="list-style: none;" class="backtrace-posts">
			{postsWithExcerpt.map((post) => {
				const title = post.data.title || post.slug;
				// 年別ディレクトリ構造に合わせたURL生成
				const fileName = post.slug.replace(/^\d{4}\//, ''); // 年別ディレクトリを除去
				const dateMatch = fileName.match(/^(\d{4})-(\d{2})-(\d{2})-(.+)$/);
				let postUrl;
				if (dateMatch) {
					const [, year, month, day, slug] = dateMatch;
					postUrl = `/backtrace/${year}/${month}/${day}/${slug}/`;
				} else {
					postUrl = `/backtrace/${post.slug}/`;
				}
				const tags = post.data.tags || [];
				
				return (
					<li class="hover-style border-y border-solid py-2 group">
						<article
							class="mx-auto w-11/12 sm:w-5/6"
							itemscope
							itemtype="http://schema.org/Article"
						>
							<header class="py-4">
								<h2 class="text-xl sm:text-2xl font-bold font-titillium group-hover:text-green-400 transition-colors duration-200 break-words">
									<a href={postUrl} itemprop="url">
										<span itemprop="headline">{title}</span>
									</a>
								</h2>
								<time datetime={post.data.pubDate.toISOString()} itemprop="datePublished" class="text-sm text-gray-600">{post.data.pubDate.toLocaleDateString('ja-JP', {
									year: 'numeric',
									month: '2-digit',
									day: '2-digit'
								}).replace(/\//g, '/')}</time>
								{tags.length > 0 && (
									<div class="mt-2">
										{tags.map((tag: string) => (
											<span class="inline-block bg-gray-200 text-gray-700 text-xs px-2 py-1 rounded mr-2 mb-1">
												{tag}
											</span>
										))}
									</div>
								)}
							</header>
							<section>
								<p
									itemprop="description"
									set:html={(post.data.description && post.data.description.trim() !== '') ? post.data.description : post.excerpt}
								>
								</p>
								<div class="my-2 py-2">
									<a href={postUrl} class="read-more text-base sm:text-lg font-mono text-black underline hover:text-white transition-colors duration-200 group-hover:text-green-400">&gt;&gt; READ MORE</a>
								</div>
							</section>
						</article>
					</li>
				);
			})}
		</ol>
	</main>

	<!-- Yearly View -->
	<main id="yearly-view" class="view-content hidden" role="tabpanel" aria-labelledby="yearly-mode">
		{years.map(year => {
			const yearPosts = postsByYearWithExcerpt[year];
			return (
				<section class="year-section mb-8" data-year={year} aria-labelledby={`year-${year}`}>
					<div class="flex items-center justify-between mb-4">
						<h2 id={`year-${year}`} class="text-xl sm:text-2xl font-bold font-titillium text-gray-800">{year}</h2>
						<button 
							class="back-to-top-btn px-2 py-1 text-sm font-mono border rounded hover:bg-gray-100 transition-colors"
							title="ナビゲーションに戻る"
							aria-label="年別ナビゲーションに戻る"
						>
							↑
						</button>
					</div>
					<div class="space-y-3 mx-auto w-11/12 sm:w-full">
						{yearPosts.map((post) => {
							const title = post.data.title || post.slug;
							const fileName = post.slug.replace(/^\d{4}\//, '');
							const dateMatch = fileName.match(/^(\d{4})-(\d{2})-(\d{2})-(.+)$/);
							let postUrl;
							if (dateMatch) {
								const [, , month, day, slug] = dateMatch;
								postUrl = `/backtrace/${year}/${month}/${day}/${slug}/`;
							} else {
								postUrl = `/backtrace/${post.slug}/`;
							}
							const tags = post.data.tags || [];
							
							return (
								<article class="hover-style py-3 px-2 group border border-transparent hover:border-gray-200 rounded" itemscope itemtype="http://schema.org/Article">
									<div class="flex flex-col space-y-2">
										<div class="flex flex-col sm:flex-row sm:items-center space-y-1 sm:space-y-0 sm:space-x-2">
											<time class="text-gray-600 whitespace-nowrap text-sm" datetime={post.data.pubDate.toISOString()} itemprop="datePublished">{post.data.pubDate.toLocaleDateString('ja-JP', {
												month: '2-digit',
												day: '2-digit'
											}).replace(/\//g, '/')}</time>
											<a href={postUrl} class="text-black group-hover:text-green-400 break-words font-mono text-sm sm:text-base transition-colors duration-200" itemprop="url headline">{title}</a>
										</div>
										{tags.length > 0 && (
											<div class="flex flex-wrap gap-1">
												{tags.map((tag: string) => (
													<span class="inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded border">
														{tag}
													</span>
												))}
											</div>
										)}
									</div>
								</article>
							);
						})}
					</div>
				</section>
			);
		})}
	</main>
</Layout>

<style>
	/* Backtraceページ専用のスタイル */
	@media (max-width: 640px) {
		.backtrace-posts {
			padding-left: 0;
			padding-right: 0;
		}
		
		.backtrace-posts li {
			margin-left: 0.5rem;
			margin-right: 0.5rem;
		}
		
		/* 年別表示のモバイル最適化 */
		.year-section article {
			padding: 0.75rem;
		}
		
		.year-section .flex-wrap {
			gap: 0.25rem;
		}
		
		.year-section .flex-wrap span {
			font-size: 0.75rem;
			padding: 0.25rem 0.5rem;
		}
	}
	
	.view-mode-btn {
		@apply text-gray-400 border-gray-300 hover:border-gray-400 transition-colors;
	}
	.view-mode-btn.active {
		@apply text-black border-black underline;
	}
	.year-jump-btn {
		@apply text-gray-600 border-gray-300;
	}
	.year-jump-btn:hover {
		@apply text-black border-black;
	}
	.back-to-top-btn {
		@apply text-gray-600 border-gray-300;
	}
	.back-to-top-btn:hover {
		@apply text-black border-black;
	}
</style>

<script>
	// 表示モードの切り替え機能
	function initViewModeToggle() {
		const flatBtn = document.getElementById('flat-mode');
		const yearlyBtn = document.getElementById('yearly-mode');
		const flatView = document.getElementById('flat-view');
		const yearlyView = document.getElementById('yearly-view');
		const yearNav = document.getElementById('year-nav');
		
		// ローカルストレージから保存されたモードを取得
		const savedMode = localStorage.getItem('backtrace-view-mode') || 'flat';
		
		function setViewMode(mode: string) {
			// ボタンの状態を更新
			flatBtn?.classList.toggle('active', mode === 'flat');
			yearlyBtn?.classList.toggle('active', mode === 'yearly');
			
			// ARIA属性を更新
			flatBtn?.setAttribute('aria-selected', (mode === 'flat').toString());
			yearlyBtn?.setAttribute('aria-selected', (mode === 'yearly').toString());
			
			// ビューの表示/非表示を切り替え
			flatView?.classList.toggle('hidden', mode !== 'flat');
			yearlyView?.classList.toggle('hidden', mode !== 'yearly');
			yearNav?.classList.toggle('hidden', mode !== 'yearly');
			
			// yearlyモードに切り替えた時は年ジャンプ機能を再初期化
			if (mode === 'yearly') {
				// DOMの更新を待つ
				setTimeout(() => {
					initYearJump();
				}, 200);
			}
			
			// ローカルストレージに保存
			localStorage.setItem('backtrace-view-mode', mode);
		}
		
		// 初期表示を設定
		setViewMode(savedMode);
		
		// ボタンクリックイベント
		flatBtn?.addEventListener('click', () => setViewMode('flat'));
		yearlyBtn?.addEventListener('click', () => setViewMode('yearly'));
		
		// 年ジャンプ機能の初期化
		function initYearJump() {
			const yearJumpBtns = document.querySelectorAll('.year-jump-btn');
			
			yearJumpBtns.forEach((btn) => {
				// 既存のイベントリスナーを削除（重複防止）
				btn.removeEventListener('click', handleYearJump);
				// 新しいイベントリスナーを追加
				btn.addEventListener('click', handleYearJump);
			});
			
			// 「↑」ボタンのイベントリスナーを設定
			const backToTopBtns = document.querySelectorAll('.back-to-top-btn');
			backToTopBtns.forEach((btn) => {
				// 既存のイベントリスナーを削除（重複防止）
				btn.removeEventListener('click', handleBackToTop);
				// 新しいイベントリスナーを追加
				btn.addEventListener('click', handleBackToTop);
			});
		}
		
		// 年ジャンプの処理関数
		function handleYearJump(event: Event) {
			const btn = event.target as HTMLElement;
			const year = btn.getAttribute('data-year');
			
			if (year) {
				// 年セクションを正確に特定（ボタンではなく、year-sectionクラスを持つ要素）
				const yearSection = document.querySelector(`.year-section[data-year="${year}"]`);
				
				if (yearSection) {
					yearSection.scrollIntoView({ behavior: 'smooth' });
				}
			}
		}
		
		// ナビゲーションに戻る処理関数
		function handleBackToTop(event: Event) {
			const yearNav = document.getElementById('year-nav');
			if (yearNav) {
				yearNav.scrollIntoView({ behavior: 'smooth' });
			}
		}
		
		// 初期化時に年ジャンプ機能を設定
		initYearJump();
	}
	
	// DOM読み込み完了後に初期化
	document.addEventListener('DOMContentLoaded', initViewModeToggle);
</script> 