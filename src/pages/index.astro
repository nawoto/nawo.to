---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { SITE } from '../config';
import { getLogSlug, getTextSlug } from '../utils/slug';

const posts = (await getCollection('logs')).sort(
	(a: CollectionEntry<'logs'>, b: CollectionEntry<'logs'>) => 
		b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const texts = (await getCollection('texts')).sort(
	(a: CollectionEntry<'texts'>, b: CollectionEntry<'texts'>) => 
		b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// 記事の抜粋を生成する関数（Gatsbyライク版）
function generateExcerpt(content: string): string {
	// 最初の140文字程度を取得（Gatsbyのデフォルト）
	const plainText = content
		.replace(/---[\s\S]*?---/g, '') // フロントマターを除去
		.slice(0, 500) // 最初の500文字から処理開始
		.replace(/```[\s\S]*?```/g, '[コード]') // コードブロックを[コード]に置換
		.replace(/#{1,6}\s+/g, '') // ヘッダー記号を除去
		.replace(/\*{1,2}([^*]+)\*{1,2}/g, '$1') // 太字・斜体記号を除去
		.replace(/`([^`]+)`/g, '$1') // インラインコード記号を除去
		.replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // リンク記号を除去
		.replace(/\n+/g, ' ') // 改行を空白に変換
		.replace(/\s+/g, ' ') // 複数の空白を1つに
		.trim()
		.slice(0, 140); // 最終的に140文字に制限
	
	return plainText + (plainText.length >= 140 ? '...' : '');
}

// 記事の本文を読み込んで抜粋を生成
const postsWithExcerpt = await Promise.all(
	posts.map(async (post) => {
		const excerpt = generateExcerpt(post.body);
		return {
			...post,
			excerpt
		};
	})
);

const textsWithExcerpt = await Promise.all(
	texts.map(async (text) => {
		const excerpt = generateExcerpt(text.body);
		return {
			...text,
			excerpt
		};
	})
);
---

<Layout title={SITE.title} image={SITE.images.defaultOg}>
	<!-- Tab Navigation -->
	<div class="mt-4">
		<div class="tab-container">
			<a href="/" class="tab active">LOGS</a>
			<a href="/texts" class="tab">TEXTS</a>
		</div>
		<p class="text-sm text-gray-500 text-left pl-4 mt-2">
			日々のなんとなくを書き留めてます✍️
		</p>
	</div>
	<ol style="list-style: none;">
		{postsWithExcerpt.map((post) => {
			const title = post.data.title || post.slug;
			const postUrl = `/${getLogSlug(post.slug)}/`;
			
			return (
				<li class="hover-style border-y border-solid py-2 last:border-b-0">
					<article
						class="mx-auto w-5/6"
						itemscope
						itemtype="http://schema.org/Article"
					>
						<header class="py-4">
							<h2 class="text-2xl font-bold font-titillium">
								<a href={postUrl} itemprop="url">
									<span itemprop="headline">{title}</span>
								</a>
							</h2>
							<small>{post.data.pubDate.toLocaleDateString('ja-JP', {
								year: 'numeric',
								month: '2-digit',
								day: '2-digit'
							}).replace(/\//g, '/')}</small>
						</header>
						<section>
							<p
								itemprop="description"
								set:html={post.data.description || post.excerpt}
							>
							</p>
							<div class="my-2 border py-2 text-center uppercase">
								<a href={postUrl}>read more</a>
							</div>
						</section>
					</article>
				</li>
			);
		})}
	</ol>
</Layout>